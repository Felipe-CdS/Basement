// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package landing_view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"nugu.dev/basement/pkg/models"
	"time"
)

func LandingPageView(list []models.DayStats) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\" data-theme=\"dark\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"google\" content=\"notranslate\"><title>Basement </title><link rel=\"icon\" type=\"image/svg+xml\" href=\"/assets/img/favicon.ico\"><link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/styles.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/special-styles.css\"><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin><link href=\"https://fonts.googleapis.com/css2?family=Noto+Serif+KR:wght@200..900&amp;display=swap\" rel=\"stylesheet\"></head><body class=\"w-screen flex flex-col bg-[#0F0F0F] overflow-x-hidden text-white p-10\"><div class=\"mx-auto w-full bg-center bg-cover lg:w-7/12 min-h-48\" style=\"background-image: url(assets/img/kyubey.png);\"></div><h1 class=\"mx-auto mt-2 text-4xl heading-primary font-kr\">누구세요?</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HoursCounter(list).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"links-list\" class=\"flex flex-col mt-5\"><h2 id=\"papers-articles-books\" class=\"heading-primary\">Papers / Articles / Books</h2><ul><li><p>[ ]  <a href=\"https://efrei.poupa.net/programmation%20en%20c/cours/the_c_puzzle_book.pdf\">★★★★★ | The C puzzle book</a></p></li><li><p>[ ]  <a href=\"https://www.cis.upenn.edu/~cis5150/linalg-I-f.pdf\">★★★★★ | Linear Algebra for Computer Vision, Robotics, and Machine Learning</a></p></li><li><p>[ ]  <a href=\"https://jeffe.cs.illinois.edu/teaching/algorithms/\">★★★★★ | Algorithms</a></p></li><li><p>[ ]  <a href=\"https://siboehm.com/articles/22/Fast-MMM-on-CPU\">★★★★★ | Fast Multidimensional Matrix Multiplication on CPU from Scratch</a></p></li><li><p>[ ]  <a href=\"https://people.freebsd.org/~lstewart/articles/cpumemory.pdf\">★★★★☆ | What every programmer should know about memory</a></p></li><li><p>[ ]  <a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">★★★★☆ | MapReduce: Simplified Data Processing on Large Clusters</a></p></li><li><p>[ ] <a href=\"https://raytracing.github.io/\">★★★★☆ | ray tracing in one week</a></p></li><li><p>[112/495] ★★★☆☆ | Let's Go - Alex Edwards</p></li><li><p>[ ] ★★★★☆ | Let's Go Further - Alex Edwards</p></li></ul><h2 id=\"less-than-1-hour-reads\" class=\"heading-primary\">Less than 1 hour reads</h2><ul><li><p>[ ]  <a href=\"https://deno.com/blog/http-imports\">What we got wrong about HTTP imports</a></p></li><li><p>[ ]  <a href=\"https://anishathalye.com/managing-your-dotfiles/\">Managing your dotfiles</a></p></li><li><p>[ ]  <a href=\"https://thesquareplanet.com/blog/eisenhower-vectors/\">Eisenhower Vectors</a></p></li><li><p>[ ]  <a href=\"https://thesquareplanet.com/blog/how-the-internet-works/\">How the internet works</a></p></li><li><p>[ ]  <a href=\"https://ismailefe.org/blog/why_use_emacs/\">Why use emacs</a></p></li><li><p>[ ]  <a href=\"https://blog.teamtreehouse.com/go-interfaces-awesome\">Go Interfaces are awesome</a></p></li><li><p>[ ]  <a href=\"https://benhoyt.com/writings/how-to-apply/\">How (not) to apply for a software job</a></p></li><li><p>[ ]  <a href=\"https://benhoyt.com/writings/go-routing/\">Different approaches to HTTP routing in Go</a></p></li><li><p>[ ]  <a href=\"https://www.0x65.dev/blog/2019-12-06/building-a-search-engine-from-scratch.html\">Building a search engine from scratch</a></p></li></ul><h2 id=\"videos\" class=\"heading-primary\">Videos</h2><ul><li>[ ]  <a href=\"https://www.youtube.com/watch?v=z56jmr9z34q&amp;list=plyzovjj3bhqulokgg59rs43e29ro7i57j&amp;index=3\">★★★★★ | MIT CS Classes</a></li><li>[ ]  <a href=\"https://www.youtube.com/watch?v=HaBMAD-Dr8M&amp;list=PLnAxReCloSeTJc8ZGogzjtCtXl_eE6yzA\">★★★☆☆ | How Computers Work - Building Scott&#39;s CPU</a></li></ul><h2 id=\"full-blogs\" class=\"heading-primary\">Full Blogs</h2><h4 id=\"from-x\" class=\"heading-primary\">From X</h4><ul><li><a href=\"https://graffioh.com/\">bertø (@graffioh)</a></li></ul><h4 id=\"from-college-material\" class=\"heading-primary\">From College Material</h4><ul><li><a href=\"https://anishathalye.com/\">Anish Athalye (MIT)</a></li><li><a href=\"https://thesquareplanet.com/blog/\">Jon Gjengset (MIT)</a></li></ul><h4 id=\"from-others\">From Others</h4><ul id=\"from-others-list\"><li><a href=\"https://graffioh.com/\">bertø (@graffioh)</a></li></ul><audio id=\"noise\" loop controls src=\"/assets/audio/noise.mp3\"></audio></div><script src=\"/assets/js/index.js\"></script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func HoursCounter(list []models.DayStats) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-col pt-4 pb-2 mx-auto mt-5 w-full md:px-4 lg:w-auto\"><h1 class=\"mb-2 text-lg font-medium\">0 hours studied/worked in 2024</h1><div class=\"flex flex-col py-4 px-4 space-y-2 w-full rounded border border-gray-500 md:py-2\"><div class=\"flex flex-col justify-around lg:flex-row\"><h1 class=\"text-lg font-medium\">Daily Average:&nbsp; <span class=\"float-right\">0 hours</span></h1><h1 class=\"text-lg font-medium\">Days Learned:&nbsp; <span class=\"float-right\">0%</span></h1><h1 class=\"text-lg font-medium\">Current Streak:&nbsp; <span class=\"float-right\">0 days</span></h1><h1 class=\"text-lg font-medium\">Longest Streak:&nbsp; <span class=\"float-right\">0 days</span></h1></div><div class=\"flex overflow-x-scroll w-full lg:overflow-x-visible\"><div class=\"grid mr-2\" style=\"grid-template-rows: repeat(1, 0.75rem);\"><span class=\"text-xs text-center leading-[.9rem]\">S</span> <span class=\"text-xs text-center leading-[.9rem]\">M</span> <span class=\"text-xs text-center leading-[.9rem]\">T</span> <span class=\"text-xs text-center leading-[.9rem]\">W</span> <span class=\"text-xs text-center leading-[.9rem]\">T</span> <span class=\"text-xs text-center leading-[.9rem]\">F</span> <span class=\"text-xs text-center leading-[.9rem]\">S</span></div><div id=\"status-grid\" class=\"grid grid-flow-col gap-1 select-none\" style=\"grid-template-rows: repeat(7, 0.75rem);\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for i := 1; i < 367; i++ {
			switch {
			case i < list[0].Date.YearDay() || i > list[len(list)-1].Date.YearDay():
				templ_7745c5c3_Err = EmptyDayBlock(i).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			default:
				templ_7745c5c3_Err = Dayblock(getDayStatByYearDay(i, list)).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div><div class=\"flex flex-col-reverse justify-between md:flex-row md:px-7\"><a class=\"mx-auto underline transition duration-75 cursor-pointer md:ml-0 hover:text-blue-400\">How these times are calculated?</a><div class=\"flex mx-auto space-x-1 md:mr-0\"><div class=\"\">Less</div><div class=\"grid gap-x-1 items-center\" style=\"grid-template-columns: repeat(7, 0.75rem);\"><div class=\"relative bg-gray-800 rounded-sm size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">Nothing studied/worked.</p></div></div><div class=\"relative bg-green-900 rounded-sm border border-green-700 size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">1+ hour studied/worked.</p></div></div><div class=\"relative bg-green-700 rounded-sm border border-green-500 size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">2+ hours studied/worked.</p></div></div><div class=\"relative bg-green-500 rounded-sm border border-green-300 size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">3+ hours studied/worked.</p></div></div><div class=\"relative bg-green-300 rounded-sm size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">4+ hours studied/worked.</p></div></div><div class=\"relative bg-green-100 rounded-sm size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">5+ hours studied/worked.</p></div></div><div class=\"relative bg-amber-400 rounded-sm group size-3 shiny\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">6+ hours studied/worked. Perfect!</p></div></div></div><div class=\"\">More</div></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Dayblock(s models.DayStats) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var4 = []any{getDayBlockColorClasses(s)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/landing/landing.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s", getTotalTime(s)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/landing/landing.templ`, Line: 354, Col: 40}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" studied/worked on ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%s", s.Date.Format(time.RFC822)[:10]))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/landing/landing.templ`, Line: 354, Col: 113}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func EmptyDayBlock(dateCount int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"relative bg-gray-800 rounded-sm size-3 group\"><div class=\"shadow transition duration-150 -translate-x-1/2 group-hover:flex group-hover:left-1/2 group-hover:opacity-100 delay-[10ms] speech-bubble\"><p class=\"whitespace-nowrap\">0 minutes studied/worked on ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(generateFormatedDateFromCount(dateCount))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/landing/landing.templ`, Line: 365, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func getDayBlockColorClasses(s models.DayStats) string {

	finalStmt := "relative rounded-sm size-3 group"
	totalSeconds := (s.ProgrammingHobby + s.ProgrammingWork + s.Study + s.ReadStudy) / 3600

	switch {
	case totalSeconds >= 6:
		return fmt.Sprintf("%s %s", finalStmt, "bg-amber-400")
	case totalSeconds >= 5:
		return fmt.Sprintf("%s %s", finalStmt, "bg-green-100")
	case totalSeconds >= 4:
		return fmt.Sprintf("%s %s", finalStmt, "bg-green-300")
	case totalSeconds >= 3:
		return fmt.Sprintf("%s %s", finalStmt, "bg-green-500 border border-green-300")
	case totalSeconds >= 2:
		return fmt.Sprintf("%s %s", finalStmt, "bg-green-700 border border-green-500")
	case totalSeconds >= 1:
		return fmt.Sprintf("%s %s", finalStmt, "bg-green-900 border border-green-700")
	default:
		return fmt.Sprintf("%s %s", finalStmt, "bg-gray-800")
	}
}

func generateFormatedDateFromCount(dateCount int) string {

	january1 := time.Date(2023, 12, 31, 0, 0, 0, 0, time.UTC)
	endDate := january1.AddDate(0, 0, dateCount).Format(time.RFC822)

	return fmt.Sprintf("%s", endDate[:10])
}

func getTotalTime(s models.DayStats) string {

	totalS := s.ProgrammingHobby + s.ProgrammingWork
	totalS += s.Study
	totalS += s.ReadStudy
	totalS += s.Korean

	totalH := totalS / 3600
	totalM := totalS/60 - (totalH * 60)

	return fmt.Sprintf("%dh %02dm", totalH, totalM)
}

func getTimeSingleStat(s int) string {

	totalH := s / 3600
	totalM := s/60 - (totalH * 60)

	return fmt.Sprintf("%dh %02dm", totalH, totalM)
}

func getDayStatByYearDay(d int, l []models.DayStats) models.DayStats {

	for _, s := range l {
		if s.Date.YearDay() == d {
			return s
		}
	}

	return models.DayStats{}
}
